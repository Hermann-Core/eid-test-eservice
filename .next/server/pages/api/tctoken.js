"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/tctoken";
exports.ids = ["pages/api/tctoken"];
exports.modules = {

/***/ "fast-xml-parser":
/*!**********************************!*\
  !*** external "fast-xml-parser" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("fast-xml-parser");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("uuid");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftctoken&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftctoken.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftctoken&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftctoken.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_tctoken_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/tctoken.ts */ \"(api)/./pages/api/tctoken.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_tctoken_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_tctoken_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_tctoken_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_tctoken_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/tctoken\",\n        pathname: \"/api/tctoken\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_tctoken_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnRjdG9rZW4mcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnRjdG9rZW4udHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUQ7QUFDbkQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9laWQtdGVzdC1lc2VydmljZS8/Y2M1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL3RjdG9rZW4udHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90Y3Rva2VuXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGN0b2tlblwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftctoken&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftctoken.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/sessionManager.ts":
/*!*******************************!*\
  !*** ./lib/sessionManager.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sessionManager: () => (/* binding */ sessionManager)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_0__]);\nuuid__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Define the path for the session storage directory\nconst SESSIONS_DIR = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \".sessions\");\nclass SessionManager {\n    constructor(){\n        this.SESSION_TIMEOUT = 30 * 60 * 1000 // 30 minutes\n        ;\n        this.ensureSessionsDir();\n        // Cleanup expired sessions every 5 minutes\n        setInterval(()=>this.cleanupExpiredSessions(), 5 * 60 * 1000);\n    }\n    async ensureSessionsDir() {\n        try {\n            await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().mkdir(SESSIONS_DIR, {\n                recursive: true\n            });\n        } catch (error) {\n            console.error(\"Failed to create session directory:\", error);\n        }\n    }\n    getSessionFilePath(token) {\n        // Basic sanitization to prevent path traversal\n        if (!/^[a-f0-9-]+$/.test(token)) {\n            throw new Error(\"Invalid token format\");\n        }\n        return path__WEBPACK_IMPORTED_MODULE_2___default().join(SESSIONS_DIR, `${token}.json`);\n    }\n    async createConfigurationSession(config) {\n        const token = (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)();\n        const sessionData = {\n            sessionId: \"\",\n            pskId: \"\",\n            pskKey: \"\",\n            eCardServerAddress: undefined,\n            config,\n            startTime: Date.now()\n        };\n        const filePath = this.getSessionFilePath(token);\n        await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().writeFile(filePath, JSON.stringify(sessionData, null, 2));\n        console.log(`Created configuration session file for token: ${token}`);\n        return token;\n    }\n    async updateSessionWithUseIDResponse(token, sessionId, pskId, pskKey, eCardServerAddress) {\n        try {\n            const session = await this.getSession(token);\n            if (!session) {\n                return false;\n            }\n            session.sessionId = sessionId;\n            session.pskId = pskId;\n            session.pskKey = pskKey;\n            session.eCardServerAddress = eCardServerAddress;\n            const filePath = this.getSessionFilePath(token);\n            await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().writeFile(filePath, JSON.stringify(session, null, 2));\n            console.log(`Updated session with useID response for token: ${token}`);\n            return true;\n        } catch (error) {\n            console.error(`Error updating session for token ${token}:`, error);\n            return false;\n        }\n    }\n    async getSession(token) {\n        try {\n            const filePath = this.getSessionFilePath(token);\n            const fileContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(filePath, \"utf-8\");\n            const session = JSON.parse(fileContent);\n            // Check if session has expired\n            if (Date.now() - session.startTime > this.SESSION_TIMEOUT) {\n                console.log(`Session expired for token: ${token}`);\n                await this.deleteSession(token);\n                return undefined;\n            }\n            return session;\n        } catch (error) {\n            // If file not found, it's a valid \"not found\" case\n            if (error.code === \"ENOENT\") {\n                console.log(`Session file not found for token: ${token}`);\n            } else {\n                console.error(`Error reading session for token ${token}:`, error);\n            }\n            return undefined;\n        }\n    }\n    async deleteSession(token) {\n        try {\n            const filePath = this.getSessionFilePath(token);\n            await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().unlink(filePath);\n            console.log(`Deleted session file for token: ${token}`);\n            return true;\n        } catch (error) {\n            if (error.code !== \"ENOENT\") {\n                console.error(`Error deleting session file for token ${token}:`, error);\n            }\n            return false;\n        }\n    }\n    async cleanupExpiredSessions() {\n        try {\n            const files = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readdir(SESSIONS_DIR);\n            let cleanedCount = 0;\n            const now = Date.now();\n            for (const file of files){\n                if (path__WEBPACK_IMPORTED_MODULE_2___default().extname(file) === \".json\") {\n                    const token = path__WEBPACK_IMPORTED_MODULE_2___default().basename(file, \".json\");\n                    const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(SESSIONS_DIR, file);\n                    try {\n                        const fileContent = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readFile(filePath, \"utf-8\");\n                        const session = JSON.parse(fileContent);\n                        if (now - session.startTime > this.SESSION_TIMEOUT) {\n                            await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().unlink(filePath);\n                            cleanedCount++;\n                        }\n                    } catch (readError) {\n                        // Could be a corrupted file, delete it\n                        console.error(`Error reading session file ${file} during cleanup, deleting.`, readError);\n                        await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().unlink(filePath).catch((delError)=>console.error(`Failed to delete corrupted session file ${file}`, delError));\n                    }\n                }\n            }\n            if (cleanedCount > 0) {\n                console.log(`Cleaned up ${cleanedCount} expired sessions`);\n            }\n        } catch (error) {\n            if (error.code !== \"ENOENT\") {\n                console.error(\"Error during session cleanup:\", error);\n            }\n        }\n    }\n}\nconst sessionManager = global.sessionManager || new SessionManager();\nif (true) {\n    global.sessionManager = sessionManager;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/sessionManager.ts\n");

/***/ }),

/***/ "(api)/./lib/soapClient.ts":
/*!***************************!*\
  !*** ./lib/soapClient.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SOAPClient: () => (/* binding */ SOAPClient)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-xml-parser */ \"fast-xml-parser\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nclass SOAPClient {\n    constructor(eidServerUrl, tlsOptions){\n        this.eidServerUrl = eidServerUrl;\n        // Configure HTTPS agent for TLS/mTLS\n        const httpsAgentConfig = {\n            rejectUnauthorized: tlsOptions?.rejectUnauthorized ?? false,\n            // Allow legacy renegotiation for older eID-Servers\n            secureOptions: (__webpack_require__(/*! crypto */ \"crypto\").constants).SSL_OP_LEGACY_SERVER_CONNECT\n        };\n        // Handle certificate loading from paths or direct content\n        let certContent;\n        let keyContent;\n        let caContent;\n        // Load certificates from paths if provided\n        if (tlsOptions?.certPath && tlsOptions?.keyPath) {\n            try {\n                certContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(tlsOptions.certPath);\n                keyContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(tlsOptions.keyPath);\n                console.log(\"✅ Loaded mTLS certificates from files\");\n            } catch (error) {\n                console.error(\"❌ Error loading certificate files:\", error.message);\n                throw new Error(`Failed to load certificate files: ${error.message}`);\n            }\n        }\n        // Load CA certificate from path if provided\n        if (tlsOptions?.caPath) {\n            try {\n                caContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(tlsOptions.caPath);\n                console.log(\"✅ Loaded CA certificate from file\");\n            } catch (error) {\n                console.error(\"❌ Error loading CA file:\", error.message);\n            }\n        }\n        // Use direct certificate content if provided (overrides file paths)\n        if (tlsOptions?.cert) {\n            certContent = typeof tlsOptions.cert === \"string\" ? Buffer.from(tlsOptions.cert) : tlsOptions.cert;\n        }\n        if (tlsOptions?.key) {\n            keyContent = typeof tlsOptions.key === \"string\" ? Buffer.from(tlsOptions.key) : tlsOptions.key;\n        }\n        if (tlsOptions?.ca) {\n            caContent = typeof tlsOptions.ca === \"string\" ? Buffer.from(tlsOptions.ca) : tlsOptions.ca;\n        }\n        // Configure mTLS if in mutual TLS mode or if certificates are provided\n        const isMTLS = tlsOptions?.mode === \"mtls\" || certContent && keyContent;\n        if (isMTLS && certContent && keyContent) {\n            httpsAgentConfig.cert = certContent;\n            httpsAgentConfig.key = keyContent;\n            console.log(\"\\uD83D\\uDD12 Configured mutual TLS (mTLS) for eID-Server communication\");\n        } else if (isMTLS) {\n            console.warn(\"⚠️  mTLS mode requested but certificates not provided\");\n        } else {\n            console.log(\"\\uD83D\\uDD10 Using normal TLS for eID-Server communication\");\n        }\n        // Add CA certificate if provided\n        if (caContent) {\n            httpsAgentConfig.ca = caContent;\n            console.log(\"\\uD83D\\uDCDC Added CA certificate for certificate validation\");\n        }\n        // For eID testing, accept self-signed certificates\n        if (!tlsOptions?.rejectUnauthorized && !caContent) {\n            console.log(\"⚠️  Accepting self-signed certificates (eID testing mode)\");\n        }\n        const httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_1___default().Agent)(httpsAgentConfig);\n        this.client = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            httpsAgent,\n            timeout: 30000,\n            headers: {\n                \"Content-Type\": \"text/xml;charset=UTF-8\",\n                \"SOAPAction\": \"\"\n            }\n        });\n        // Add request interceptor for debugging\n        this.client.interceptors.request.use((config)=>{\n            console.log(\"SOAP Request:\", {\n                url: config.url,\n                method: config.method,\n                headers: config.headers,\n                data: config.data\n            });\n            return config;\n        }, (error)=>{\n            console.error(\"SOAP Request Error:\", error);\n            return Promise.reject(error);\n        });\n        // Add response interceptor for debugging\n        this.client.interceptors.response.use((response)=>{\n            console.log(\"SOAP Response:\", {\n                status: response.status,\n                statusText: response.statusText,\n                headers: response.headers,\n                data: response.data\n            });\n            return response;\n        }, (error)=>{\n            console.error(\"SOAP Response Error:\", error);\n            if (error.response) {\n                console.error(\"Response Data:\", error.response.data);\n                console.error(\"Response Status:\", error.response.status);\n                console.error(\"Response Headers:\", error.response.headers);\n            }\n            return Promise.reject(error);\n        });\n        this.parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__.XMLParser({\n            ignoreAttributes: false,\n            removeNSPrefix: true\n        });\n        this.builder = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__.XMLBuilder({\n            ignoreAttributes: false,\n            format: true\n        });\n    }\n    buildUseIDRequest(config) {\n        const request = {\n            \"?xml\": {\n                \"@_version\": \"1.0\",\n                \"@_encoding\": \"UTF-8\"\n            },\n            \"soapenv:Envelope\": {\n                \"@_xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n                \"@_xmlns:eid\": \"http://bsi.bund.de/eID/\",\n                \"soapenv:Header\": {},\n                \"soapenv:Body\": {\n                    \"eid:useIDRequest\": {\n                        \"eid:UseOperations\": {}\n                    }\n                }\n            }\n        };\n        const useOperations = request[\"soapenv:Envelope\"][\"soapenv:Body\"][\"eid:useIDRequest\"][\"eid:UseOperations\"];\n        // Add all operations\n        Object.entries(config.operations).forEach(([key, value])=>{\n            if (value !== \"PROHIBITED\") {\n                useOperations[`eid:${key}`] = value;\n            }\n        });\n        const useIDRequest = request[\"soapenv:Envelope\"][\"soapenv:Body\"][\"eid:useIDRequest\"];\n        // Add AgeVerification if enabled\n        if (config.ageVerification.enabled) {\n            useIDRequest[\"eid:AgeVerificationRequest\"] = {\n                \"eid:Age\": config.ageVerification.age\n            };\n        }\n        // Add PlaceVerification if enabled\n        if (config.placeVerification.enabled) {\n            useIDRequest[\"eid:PlaceVerificationRequest\"] = {\n                \"eid:CommunityID\": config.placeVerification.communityId\n            };\n        }\n        // Add TransactionInfo if enabled\n        if (config.transactionInfo.enabled) {\n            useIDRequest[\"eid:TransactionInfo\"] = config.transactionInfo.info;\n        }\n        // Add TransactionAttestation if enabled\n        if (config.transactionAttestation.enabled) {\n            useIDRequest[\"eid:TransactionAttestationRequest\"] = {\n                \"eid:TransactionAttestationFormat\": config.transactionAttestation.format,\n                \"eid:TransactionContext\": config.transactionAttestation.context\n            };\n        }\n        // Add LevelOfAssurance if specified\n        if (config.levelOfAssurance) {\n            useIDRequest[\"eid:LevelOfAssuranceRequest\"] = config.levelOfAssurance;\n        }\n        // Add EIDTypeRequest if any types are specified\n        const eidTypes = Object.entries(config.eidTypeRequest).filter(([_, value])=>value);\n        if (eidTypes.length > 0) {\n            useIDRequest[\"eid:EIDTypeRequest\"] = {};\n            eidTypes.forEach(([key, value])=>{\n                useIDRequest[\"eid:EIDTypeRequest\"][`eid:${key}`] = value;\n            });\n        }\n        return this.builder.build(request);\n    }\n    buildGetResultRequest(sessionId, requestCounter = 1) {\n        const request = {\n            \"?xml\": {\n                \"@_version\": \"1.0\",\n                \"@_encoding\": \"UTF-8\"\n            },\n            \"soapenv:Envelope\": {\n                \"@_xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n                \"@_xmlns:eid\": \"http://bsi.bund.de/eID/\",\n                \"soapenv:Header\": {},\n                \"soapenv:Body\": {\n                    \"eid:getResultRequest\": {\n                        \"eid:Session\": {\n                            \"eid:ID\": sessionId\n                        },\n                        \"eid:RequestCounter\": requestCounter\n                    }\n                }\n            }\n        };\n        return this.builder.build(request);\n    }\n    async callUseID(config) {\n        const soapRequest = this.buildUseIDRequest(config);\n        console.log(\"Sending useID request:\", soapRequest);\n        try {\n            const response = await this.client.post(this.eidServerUrl, soapRequest);\n            const parsed = this.parser.parse(response.data);\n            console.log(\"Received useID response:\", JSON.stringify(parsed, null, 2));\n            const useIDResponse = parsed.Envelope?.Body?.useIDResponse;\n            if (!useIDResponse) {\n                throw new Error(\"Invalid useID response structure\");\n            }\n            return {\n                Session: {\n                    ID: useIDResponse.Session.ID\n                },\n                PSK: {\n                    ID: useIDResponse.PSK.ID,\n                    Key: useIDResponse.PSK.Key\n                },\n                eCardServerAddress: useIDResponse.eCardServerAddress,\n                Result: {\n                    ResultMajor: useIDResponse.Result?.ResultMajor || \"http://www.bsi.bund.de/ecard/api/1.1/resultmajor#ok\",\n                    ResultMinor: useIDResponse.Result?.ResultMinor,\n                    ResultMessage: useIDResponse.Result?.ResultMessage\n                }\n            };\n        } catch (error) {\n            console.error(\"Error calling useID:\", error.message);\n            if (error.response) {\n                console.error(\"Response data:\", error.response.data);\n            }\n            throw new Error(`Failed to call useID: ${error.message}`);\n        }\n    }\n    async callGetResult(sessionId, requestCounter = 1) {\n        const soapRequest = this.buildGetResultRequest(sessionId, requestCounter);\n        console.log(\"Sending getResult request:\", soapRequest);\n        try {\n            const response = await this.client.post(this.eidServerUrl, soapRequest);\n            const parsed = this.parser.parse(response.data);\n            console.log(\"Received getResult response:\", JSON.stringify(parsed, null, 2));\n            const getResultResponse = parsed.Envelope?.Body?.getResultResponse;\n            if (!getResultResponse) {\n                throw new Error(\"Invalid getResult response structure\");\n            }\n            return getResultResponse;\n        } catch (error) {\n            console.error(\"Error calling getResult:\", error.message);\n            if (error.response) {\n                console.error(\"Response data:\", error.response.data);\n            }\n            throw new Error(`Failed to call getResult: ${error.message}`);\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/soapClient.ts\n");

/***/ }),

/***/ "(api)/./pages/api/tctoken.ts":
/*!******************************!*\
  !*** ./pages/api/tctoken.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-xml-parser */ \"fast-xml-parser\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_sessionManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/sessionManager */ \"(api)/./lib/sessionManager.ts\");\n/* harmony import */ var _lib_soapClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/soapClient */ \"(api)/./lib/soapClient.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_sessionManager__WEBPACK_IMPORTED_MODULE_1__, _lib_soapClient__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_sessionManager__WEBPACK_IMPORTED_MODULE_1__, _lib_soapClient__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { token } = req.query;\n        if (!token || typeof token !== \"string\") {\n            return res.status(400).send(\"Missing or invalid token parameter\");\n        }\n        // Get session data\n        let session = await _lib_sessionManager__WEBPACK_IMPORTED_MODULE_1__.sessionManager.getSession(token);\n        if (!session) {\n            console.log(`Session not found for token: ${token}`);\n            return res.status(404).send(\"Session not found or expired\");\n        }\n        // Check if this is a configuration session (needs useID call) or already has useID data\n        if (!session.sessionId) {\n            console.log(`Configuration session found, calling useID for token: ${token}`);\n            // Get eID-Server URL from environment or use default\n            const eidServerUrl = \"https://localhost:3000/eid\" || 0;\n            // Configure TLS options for eID-Server communication\n            const tlsOptions = {\n                rejectUnauthorized: \"development\" === \"production\",\n                mode: process.env.EID_SERVER_TLS_MODE === \"mtls\" ? \"mtls\" : \"normal\",\n                // Support both file paths and direct PEM content\n                certPath: process.env.EID_SERVER_CERT_PATH,\n                keyPath: process.env.EID_SERVER_KEY_PATH,\n                caPath: process.env.EID_SERVER_CA_PATH,\n                // Fallback to direct content if paths not provided\n                cert: process.env.EID_SERVER_CERT,\n                key: process.env.EID_SERVER_KEY,\n                ca: process.env.EID_SERVER_CA\n            };\n            const soapClient = new _lib_soapClient__WEBPACK_IMPORTED_MODULE_2__.SOAPClient(eidServerUrl, tlsOptions);\n            // Call useID on eID-Server\n            console.log(\"Calling useID with config for token:\", token);\n            const useIDResponse = await soapClient.callUseID(session.config);\n            // Check result\n            if (!useIDResponse.Result.ResultMajor.includes(\"#ok\")) {\n                console.log(`useID failed for token ${token}:`, useIDResponse.Result.ResultMajor);\n                return res.status(400).send(`eID-Server returned error: ${useIDResponse.Result.ResultMajor}`);\n            }\n            // Update session with useID response data\n            const updated = await _lib_sessionManager__WEBPACK_IMPORTED_MODULE_1__.sessionManager.updateSessionWithUseIDResponse(token, useIDResponse.Session.ID, useIDResponse.PSK.ID, useIDResponse.PSK.Key, useIDResponse.eCardServerAddress);\n            if (!updated) {\n                console.log(`Failed to update session for token: ${token}`);\n                return res.status(500).send(\"Failed to update session\");\n            }\n            // Re-fetch the session to get the latest data\n            session = await _lib_sessionManager__WEBPACK_IMPORTED_MODULE_1__.sessionManager.getSession(token);\n            if (!session) {\n                console.log(`Session not found after update for token: ${token}`);\n                return res.status(404).send(\"Session not found after update\");\n            }\n            console.log(`Successfully updated session for token: ${token}`);\n        } else {\n            console.log(`Session already has useID data for token: ${token}`);\n        }\n        // Use eCardServerAddress from useID response, or default\n        const serverAddress = session.eCardServerAddress || \"https://localhost:3000/eid\" || 0;\n        // Build TC Token XML\n        const builder = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLBuilder({\n            ignoreAttributes: false,\n            format: false,\n            suppressEmptyNode: true\n        });\n        const tcToken = {\n            TCTokenType: {\n                ServerAddress: serverAddress,\n                SessionIdentifier: session.pskId,\n                RefreshAddress: `https://localhost:8443/api/refresh?token=${token}`,\n                CommunicationErrorAddress: `https://localhost:8443/error?token=${token}`,\n                Binding: \"urn:liberty:paos:2006-08\",\n                \"PathSecurity-Protocol\": \"urn:ietf:rfc:4279\",\n                \"PathSecurity-Parameters\": {\n                    PSK: session.pskKey\n                }\n            }\n        };\n        const xmlContent = builder.build(tcToken);\n        // TC Token must be served as text/xml without XML declaration\n        const tcTokenWithoutDeclaration = xmlContent.replace(/<\\?xml[^?]*\\?>\\s*/, \"\");\n        console.log(\"Serving TC Token for session:\", session.sessionId);\n        res.setHeader(\"Content-Type\", \"text/xml; charset=UTF-8\");\n        res.status(200).send(tcTokenWithoutDeclaration);\n    } catch (error) {\n        console.error(\"Error serving TC Token:\", error);\n        res.status(500).send(\"Internal server error\");\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/tctoken.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftctoken&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftctoken.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();